generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id      Int     @id @default(autoincrement())
  title   String
  content String?
}

model User {
  id                     Int           @id @default(autoincrement())
  name                   String
  todayRecommendedSongId Int?
  handle                 String        @unique
  todayRecommendedSong   Song?         @relation(fields: [todayRecommendedSongId], references: [id])
  rankings               UserRanking[]

  email         String?         @unique
  googleId      String?         @unique
  UserMusicMemo UserMusicMemo[]

  following Follow[] @relation("follower")
  followers Follow[] @relation("following")
}

model Post_mokjak {
  id      Int     @id @default(autoincrement())
  title   String
  content String?
}

model Song {
  id                    Int             @id @default(autoincrement())
  title                 String
  artist                String
  thumbnailUrl          String?
  album                 String?
  rankings              UserRanking[]
  usersTodayRecommended User[]
  UserMusicMemo         UserMusicMemo[]

  @@unique([title, artist])
}

model UserRanking {
  id        Int      @id @default(autoincrement())
  userId    Int
  songId    Int
  rank      Int      @default(0) @map("song_rank")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  song      Song     @relation(fields: [songId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, songId])
  @@unique([userId, rank])
  @@map("user_rankings")
}

model UserMusicMemo {
  id           Int            @id @default(autoincrement())
  userId       Int
  songId       Int
  content      String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  song         Song           @relation(fields: [songId], references: [id])
  user         User           @relation(fields: [userId], references: [id])
  MusicMemoTag MusicMemoTag[]

  @@unique([userId, songId])
}

model MusicMemoTag {
  id      Int           @id @default(autoincrement())
  memoId  Int
  memo    UserMusicMemo @relation(fields: [memoId], references: [id])
  content String

  @@unique([memoId, content])
}

model Follow {
  id          Int      @id @default(autoincrement())
  followerId  Int
  followingId Int
  createdAt    DateTime @default(now())

  follower  User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followingId])
  @@index([followerId])
}
